
                    {/* <OwlCarousel className='owl-theme' loop={false} margin={0} nav={false} dots={false} responsive={state.responsive}>
                      {dateOptions.map((el) => <div class='item' key={getRandomInt()} onClick={() => setDateClicked(el)} >
                        <div className={`border ${styles.calendarCard} ${dateClicked === el ? styles.activeCalendarCard : ''}`}>
                          <Typography variant="h6" component="div" sx={{ fontSize: 15 }}>
                          {getWeekDay(el)}
                          </Typography>
                          <Divider/>
                        <Typography sx={{ fontSize: 14 }} color="text.secondary" gutterBottom>
                          {
                            new Date().getFullYear() === new Date(el).getFullYear() ?  
                            DateTime.fromISO(el).monthLong : 
                            <>{DateTime.fromISO(el).monthShort}, {new Date(el).getFullYear()}</>
                          }
                        </Typography>
                        <div className={`border ${styles.day} ${dateClicked === el ? styles.activeCalendarCardDay : ''}`}>
                          <Typography variant="h6" component="div" sx={{ p: 1,}} >
                          {new Date(el).getDay()}
                          </Typography>
                        </div>
                        <Typography sx={{ fontSize: 14 }} color="text.secondary" gutterBottom>
                          {getLocalTime(new Date(el))}
                        </Typography>
                        </div>
                      </div>)}
                       {dateOptions.length > 6 && <div class='item'>
                        <div className={`border ${styles.calendarCard}`} onClick={() => setShow(true)}>
                          <Typography variant="h6" component="div" sx={{ fontSize: 15}}>
                            <FaRegCalendar />
                          </Typography>
                          <Typography variant="h6" component="div" sx={{mt: 1, color: 'black', fontSize: 15, width: '55px'}}>More options</Typography>
                        </div>
                      </div>}   
                      
                    </OwlCarousel> */}

                    import React from 'react';
                    import styles from './Map.module.css';
                    import { GoogleMap, useJsApiLoader, Marker, LoadScript, MarkerF } from '@react-google-maps/api';
                    import Skeleton from '@mui/material/Skeleton';
                    
                    const containerStyle = {
                      width: '400px',
                      height: '400px'
                    };
                    const center = {
                      lat: 43.6532,
                      lng: -79.3832
                    };
                    
                    const Map = ({location = center, name='Young-Dundas Square', zoom = 12}) => {
                    
                      const { isLoaded } = useJsApiLoader({
                        id: 'google-map-script',
                        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY
                      })
                      const [map, setMap] = React.useState(null)
                    
                      const onLoad = React.useCallback(function callback(map) {
                        setMap(map)
                      }, [])
                      
                    
                      const onUnmount = React.useCallback(function callback(map) {
                        setMap(null)
                      }, [])
                    
                      return(
                      <div className={styles.Map}>
                        {!isLoaded && <Skeleton variant="rounded" width={containerStyle.width} height={containerStyle.height} />}
                        {isLoaded && 
                        <GoogleMap
                            mapContainerStyle={containerStyle}
                            center={location}
                            zoom={12}
                            onLoad={onLoad}
                            onUnmount={onUnmount}
                        >
                          <MarkerF position={location} name={name} title={name}/>
                        </GoogleMap>}
                      </div>
                      )
                    };
                    
                    
                    export default React.memo(Map)
                    